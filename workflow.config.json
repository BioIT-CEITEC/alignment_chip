{
  "workflow_description": {
    "name": "alignment_chip",
    "version": 1.0,
    "label": "Alignment ChIP",
    "type": "alignment_chip",
    "inputs": "raw_fastq/{sample}*fastq.gz",
    "outputs": [
      "cleaned_fastq/{sample}*",
      "mapped/{sample}.bam",
      "mapped/{sample}.bam.bai",
      "logs/*",
      "qc_reports/*"
    ],
    "report_index": "qc_reports/all_samples/alignment_chip_multiqc/multiqc.html",
    "reports":[
       "qc_reports/*"
    ]
  },
  "general_params": [
    "entity_name",
    "sample_name"
  ],
  "requested_params": [
    "is_paired",
    "UMI"
  ],
  "gui_params": {
    "primary": {
      "reference": {
        "label": "Genomic Reference",
        "type": "enum",
        "default": ##INCLUDE:reference_info/default_reference.json##,
        "list": ##INCLUDE:reference_info/reference2.json##
      },
      "protocol": {
        "label": "Library preparation",
        "info": "Select the library preparation protocol to help configure some default values.",
        "type": "enum",
        "default": "chipseq",
        "list": {
          "chipseq": "ChIP-seq",
          "car": "Cut&Run"
        }
      },
      "spikein": {
        "label": "Include spike-in alignment",
        "info": "Decide, if to do aditional alignment to E. coli spike-in genome. Can be used in downstream analysis for explicit calibration of samples.",
        "type": "bool",
        "default": false,
        "conditions": {
          "relevance": {
            "operand": "equal",
            "negation": false,
            "values": {
              "protocol": "chipseq"
            }
          }
        }
      }
    },
    "detailed": {
      "preprocess": {
        "label": "Reads preprocess",
        "type": "enum",
        "default": "automatic",
        "list": {
          "none": "None",
          "automatic": "Automatic",
          "advanced": "Advanced"
        }
      },
      "trim_adapters": {
        "label": "Adapters to trim (preprocess)",
        "type": "string",
        "default": "",
        "conditions": {
          "relevance": {
            "operand": "equal",
            "negation": false,
            "values": {
              "preprocess": "advanced"
            }
          }
        }
      },
      "min_length": {
        "label": "Min length (preprocess)",
        "type": "int",
        "default": 35,
        "conditions": {
          "relevance": {
            "operand": "equal",
            "negation": false,
            "values": {
              "preprocess": "advanced"
            }
          }
        }
      },
      "min_qual": {
        "label": "Trim low-quality ends (preprocess)",
        "type": "int",
        "default": 20,
        "conditions": {
          "relevance": {
            "operand": "equal",
            "negation": false,
            "values": {
              "preprocess": "advanced"
            }
          }
        }
      },
      "trim_left1": {
        "label": "Trim left R1 (preprocess)",
        "type": "int",
        "default": 0,
        "conditions": {
          "relevance": {
            "operand": "equal",
            "negation": false,
            "values": {
              "preprocess": "advanced"
            }
          }
        }
      },
      "trim_left2": {
        "label": "Trim left R2 (preprocess)",
        "type": "int",
        "default": 0,
        "conditions": {
          "relevance": {
            "operand": "equal",
            "negation": false,
            "values": {
              "preprocess": "advanced"
            }
          }
        }
      },
      "trim_right1": {
        "label": "Trim right R1 (preprocess)",
        "type": "int",
        "default": 0,
        "conditions": {
          "relevance": {
            "operand": "equal",
            "negation": false,
            "values": {
              "preprocess": "advanced"
            }
          }
        }
      },
      "trim_right2": {
        "label": "Trim right R2 (preprocess)",
        "type": "int",
        "default": 0,
        "conditions": {
          "relevance": {
            "operand": "equal",
            "negation": false,
            "values": {
              "preprocess": "advanced"
            }
          }
        }
      },
      "aligner": {
        "label": "Tool for alignment",
        "type": "enum",
        "default": "bowtie2",
        "list": {
          "bwa": "BWA",
          "bowtie2": "Bowtie2"
        }
      },
      "mark_duplicates": {
        "label": "Mark duplicated reads",
        "type": "bool",
        "default": true
      },
      "keep_not_markDups_bam": {
        "label": "Keep not_markDups_bam file",
        "type": "bool",
        "default": false,
        "conditions": {
          "relevance": {
            "operand": "equal",
            "negation": false,
            "values": {
              "mark_duplicates": true
            }
          }
        }
      },
      "umi_usage": {
        "label": "UMI usage",
        "type": "enum",
        "default": "mark_duplicates",
        "list": {
          "no": "Don't use UMI",
          "mark_duplicates": "Mark duplicates"
        },
        "conditions": {
          "relevance": {
            "operand": "equal",
            "negation": true,
            "values": {
              "UMI": "no_umi"
            }
          }
        }
      },
       "lib_ROI": {
        "label": "Regions of interest",
        "type": "enum",
        "default": "wgs",
        "list": {"wgs": "WGS or no DNA panel"},
        "conditions": {
          "relevance": {
            "operand": "equal",
            "negation": false,
            "values": {
              "UMI": "It's a hack to never show this in GUI"
            }
          }
        }
      },
      "feature_count": {
        "label": "Feature count",
        "type": "bool",
        "default": false,
        "conditions": {
          "relevance": {
            "operand": "equal",
            "negation": false,
            "values": {"lib_ROI": "rna"}
          }
        }
      },
      "RSEM": {
        "label": "RSEM",
        "type": "bool",
        "default": false,
        "conditions": {
          "relevance": {
            "operand": "equal",
            "negation": false,
            "values": {"lib_ROI": "rna"}
          }
        }
      },
      "salmon_align": {
        "label": "Salmon quantification BAM-based",
        "type": "bool",
        "default": false,
        "conditions": {
          "relevance": {
            "operand": "equal",
            "negation": false,
            "values": {"lib_ROI": "rna"}
          }
        }
      },
      "salmon_map": {
        "label": "Salmon quantification fastq-based",
        "type": "bool",
        "default": false,
        "conditions": {
          "relevance": {
            "operand": "equal",
            "negation": false,
            "values": {"lib_ROI": "rna"}
          }
        }
      },
      "kallisto": {
        "label": "Kallisto",
        "type": "bool",
        "default": false,
        "conditions": {
          "relevance": {
            "operand": "equal",
            "negation": false,
            "values": {"lib_ROI": "rna"}
          }
        }
      }
    }
  }
}

