{
  "workflow_description": {
    "name": "alignment_chip",
    "version": 1.0,
    "label": "Alignment ChIP",
    "type": "alignment_chip",
    "inputs": "processed_fastq/{sample}*fastq.gz",
    "outputs": [
      "mapped/{sample}.bam",
      "mapped/{sample}.bam.bai",
      "logs/*",
      "qc_reports/*"
    ],
    "outputs_optional": [
      "processed_fastq/{sample}*",
      "mapped/{sample}.spike.bam",
      "mapped/{sample}.spike.bam.bai"
    ],
    "report_index": "qc_reports/all_samples/alignment_chip_multiqc/multiqc.html",
    "reports":[
       "qc_reports/*"
    ]
  },
  "general_params": [
    "entity_name",
    "sample_name"
  ],
  "requested_params": [
    "is_paired",
    "UMI"
  ],
  "gui_params": {
    "primary": {
      "organism": {
        "label": "Organism",
        "type": "enum",
        "dynamicEnumName": "organism"
      },
      "assembly": {
        "label": "Genomic Reference Assembly",
        "type": "enum",
        "dynamicEnumName": "assembly",
        "filters": {
          "group": {
            "param": "organism",
            "type": "value",
            "showGroupLabel": false
          }
        }
      },
      "protocol": {
        "label": "Library preparation",
        "info": "Select the library preparation protocol to help configure some default values.",
        "type": "enum",
        "default": "chipseq",
        "list": {
          "chipseq": "ChIP-seq",
          "car": "Cut&Run"
        }
      },
      "spikein": {
        "label": "Include spike-in alignment",
        "info": "Decide, if to do aditional alignment to E. coli spike-in genome. Can be used in downstream analysis for explicit calibration of samples.",
        "type": "bool",
        "default": false,
        "conditions": {
          "value": {
            "protocol": {
              "chipseq": false,
              "car": true
            }
          }
        }
      }
    },
    "detailed": {
      "aligner": {
        "label": "Tool for alignment",
        "type": "enum",
        "default": "bowtie2",
        "list": {
          "bwa": "BWA",
          "bowtie2": "Bowtie2"
        }
      },
      "bowtie2_sens": {
        "label": "Sensitivity level (alignment)",
        "type": "enum",
        "default": "very",
        "list": {
          "very": "very sensitive",
          "normal": "sensitive"
        },
        "conditions": {
          "relevance": {
            "operand": "equal",
            "negation": false,
            "values": {
              "aligner": "bowtie2"
            }
          }
        }
      },
      "dovetailing": {
        "label": "Consider dovetailing (alignment)",
        "info": "If the mates dovetail, that is if one mate alignment extends past the beginning of the other such that the wrong mate begins upstream, consider that to be concordant.",
        "type": "bool",
        "default": false,
        "conditions": {
          "relevance": {
            "operand": "equal",
            "negation": false,
            "values": {
              "aligner": "bowtie2"
            }
          },
          "value": {
            "protocol": {
              "chipseq": false,
              "car": true
            }
          }
        }
      },
      "max_len_frags": {
        "label": "Max fragment length (alignment)",
        "info": "Maximum allowed fragment length for peak calling. Longer fragments will be removed. For example, for Cut&Run protocol, it matters if fragments are shorter than 120 bps if looking for TF binding sites.",
        "type": "int",
        "default": 1000,
        "conditions": {
          "value": {
            "protocol": {
              "chipseq": 1000,
              "car": 120
            }
          }
        }
      },
      "mark_duplicates": {
        "label": "Mark duplicated reads",
        "type": "bool",
        "default": true
      },
      "keep_not_markDups_bam": {
        "label": "Keep not_markDups_bam file",
        "type": "bool",
        "default": false,
        "conditions": {
          "relevance": {
            "operand": "equal",
            "negation": false,
            "values": {
              "mark_duplicates": true
            }
          }
        }
      },
      "umi_usage": {
        "label": "UMI usage",
        "type": "enum",
        "default": "mark_duplicates",
        "list": {
          "no": "Don't use UMI",
          "mark_duplicates": "Mark duplicates"
        },
        "conditions": {
          "relevance": {
            "operand": "equal",
            "negation": true,
            "values": {
              "UMI": "no_umi"
            }
          }
        }
      },
       "lib_ROI": {
        "label": "Regions of interest",
        "type": "enum",
        "default": "wgs",
        "list": {"wgs": "WGS or no DNA panel"},
        "conditions": {
          "relevance": {
            "operand": "equal",
            "negation": false,
            "values": {
              "UMI": "It's a hack to never show this in GUI"
            }
          }
        }
      },
      "release": {
        "label": "Release",
        "type": "bool",
        "default": false,
        "conditions": {
          "relevance": {
            "operand": "equal",
            "negation": false,
            "values": {"lib_ROI": "rna"}
          }
        }
      },
      "featureCount": {
        "label": "Feature count",
        "type": "bool",
        "default": false,
        "conditions": {
          "relevance": {
            "operand": "equal",
            "negation": false,
            "values": {"lib_ROI": "rna"}
          }
        }
      },
      "count_over": {
        "label": "Count over (exon, gene, transcript, three_prime_UTR, five_prime_UTR)",
        "type": "string",
        "default": "exon",
        "conditions": {
          "relevance": {
            "operand": "equal",
            "negation": false,
            "values": {"lib_ROI": "rna"}
          }
        }
      },
      "HTSeqCount": {
        "label": "HTSeqCount",
        "type": "bool",
        "default": false,
        "conditions": {
          "relevance": {
            "operand": "equal",
            "negation": false,
            "values": {"lib_ROI": "rna"}
          }
        }
      },
      "htseq_mode": {
        "label": "HTSeq mode",
        "type": "enum",
        "default": "union",
        "list": {
          "union": "union",
          "intersection-strict": "intersection-strict",
          "intersection-nonempty": "intersection-nonempty"},
        "conditions": {
          "relevance": {
            "operand": "equal",
            "negation": false,
            "values": {"lib_ROI": "rna"}
          }
        }
      },
      "htseq_nonunique": {
        "label": "HTSeq nonunique",
        "type": "enum",
        "default": "none",
        "list": {
          "none": "none",
          "all": "all",
          "fraction": "fraction",
          "random": "random"},
        "conditions": {
          "relevance": {
            "operand": "equal",
            "negation": false,
            "values": {"lib_ROI": "rna"}
          }
        }
      },
      "RSEM": {
        "label": "RSEM",
        "type": "bool",
        "default": false,
        "conditions": {
          "relevance": {
            "operand": "equal",
            "negation": false,
            "values": {"lib_ROI": "rna"}
          }
        }
      },
      "salmon_align": {
        "label": "Salmon quantification BAM-based",
        "type": "bool",
        "default": false,
        "conditions": {
          "relevance": {
            "operand": "equal",
            "negation": false,
            "values": {"lib_ROI": "rna"}
          }
        }
      },
      "salmon_map": {
        "label": "Salmon quantification fastq-based",
        "type": "bool",
        "default": false,
        "conditions": {
          "relevance": {
            "operand": "equal",
            "negation": false,
            "values": {"lib_ROI": "rna"}
          }
        }
      },
      "kallisto": {
        "label": "Kallisto",
        "type": "bool",
        "default": false,
        "conditions": {
          "relevance": {
            "operand": "equal",
            "negation": false,
            "values": {"lib_ROI": "rna"}
          }
        }
      }
    }
  }
}

